###################################
# iRobot Vacuum Package
# From: https://github.com/jeremywillans/ha-rest980-roomba/blob/master/vacuum.yaml
###################################

###################################
# Sensor
###################################

sensor:
  # Roomba via Rest980 Docker Image
  - platform: rest
    name: rest980
    json_attributes:
      - batPct
      - bin
      - cleanMissionStatus
      - dock
      - pose
      - signal
      - bbmssn
      - bbrun
      - name
    resource: 'http://localhost:3000/api/local/info/state'
    value_template: 'OK'
    scan_interval: 10
  - platform: template
    sensors:
      vacuum:
        friendly_name_template: >-
          {{ state_attr('sensor.rest980', 'name') }}
        value_template: >-
          {% set mapper =  {
            'clean' : 'Clean',
            'quick' : 'Clean',
            'spot' : 'Spot',
            'evac' : 'Empty',
            'dock' : 'Dock',
            'train' : 'Train',
            'none' : 'Ready' } %}
          {% set state =  state_attr('sensor.rest980', 'cleanMissionStatus')["cycle"] %}
          {{ mapper[state] if state in mapper else state }}
        icon_template: mdi:robot-vacuum
        attribute_templates:
          battery: >-
            {{ state_attr('sensor.rest980', 'batPct') }} %
          phase: >-
            {% if state_attr('sensor.rest980', 'cleanMissionStatus')["phase"] == 'charge' and state_attr('sensor.rest980', 'batPct') == 100 %}
              Idle
            {% elif state_attr('sensor.rest980', 'cleanMissionStatus')["cycle"] == 'none' and state_attr('sensor.rest980', 'cleanMissionStatus')["phase"] == 'stop' %}
              Stopped
            {% else %}
            {% set mapper =  {
              'charge' : 'Charge',
              'run' : 'Run',
              'evac' : 'Empty',
              'stop' : 'Paused',
              'stuck' : 'Stuck',
              'hmUsrDock' : 'Sent Home',
              'hmMidMsn' : 'Mid Dock',
              'hmPostMsn' : 'Final Dock' } %}
            {% set state =  state_attr('sensor.rest980', 'cleanMissionStatus')["phase"] %}
            {{ mapper[state] if state in mapper else state }}
            {% endif %}
          bin: >-
            {% set mapper =  {
              true : 'Full',
              false : 'Not Full' } %}
            {% set state =  state_attr('sensor.rest980', 'bin')["full"] %}
            {{ mapper[state] if state in mapper else state }}
          clean_base: >-
            {% set mapper =  {
              300 : 'Ready',
              301 : 'Ready',
              302 : 'Empty',
              350 : 'Bag Missing',
              351 : 'Clogged',
              353 : 'Bag Full' } %}
            {% set state =  state_attr('sensor.rest980', 'dock')["state"] %}
            {{ mapper[state] if state in mapper else state }}
          location: >-
            {% if state_attr('sensor.rest980', 'pose')['theta'] is defined %}
              ({{ state_attr('sensor.rest980', 'pose')['point']['x'] }}, {{ state_attr('sensor.rest980', 'pose')['point']['y'] }}, {{ state_attr('sensor.rest980', 'pose')['theta'] }})
            {% else %}
              Unavailable
            {% endif %}
          rssi: >-
            {{ state_attr('sensor.rest980', 'signal')['rssi'] }}
          area_cleaned: >-
            {{ (state_attr("sensor.rest980", "bbrun")["sqft"] / 10.764 * 100)| round() }} mÂ²
          job_time: >-
            {{ state_attr('sensor.rest980', 'bbrun')['hr'] }}h {{ state_attr('sensor.rest980', 'bbrun')['min'] }}m
          total_jobs: >-
            {{ state_attr('sensor.rest980', 'bbmssn')['nMssn'] }}
          dirt_events: >-
            {{ state_attr('sensor.rest980', 'bbrun')['nScrubs'] }}
          evac_events: >-
            {{ state_attr('sensor.rest980', 'bbrun')['nEvacs'] }}  
          maint_due: >-
            {% if is_state('input_boolean.vacuum_maint_due', 'on') %}
              true
            {% else %}
              false
            {% endif %}
      vacuum_location:
        friendly_name_template: >-
          {{ state_attr('sensor.rest980', 'name') }} Location
        value_template: >-
          {{ state_attr('sensor.vacuum', 'location') }}
        icon_template: mdi:home-map-marker

###################################
# Rest Command
###################################

rest_command:
  vacuum_action:
    url: 'http://localhost:3000/api/local/action/{{ command }}'
    verify_ssl: false
    method: 'get'
    timeout: 20
  vacuum_clean:
    url: 'http://localhost:3000/api/local/action/cleanRoom'
    verify_ssl: false
    method: POST
    content_type: 'application/json'
    payload: '{{ payload }}'

###################################
# Input Boolean
###################################

input_boolean:
  vacuum_maint_due:
    name: Vacuum Maintenance
    icon: mdi:wrench

###################################
# Automation
###################################

automation:
  # Update Vacuum REST Sensor for Location Details
  - alias: Vacuum Update Location
    initial_state: true
    trigger:
      - platform: time_pattern
        seconds: /2
      - platform: event
        event_type: call_service
        event_data:
          domain: rest_command
          service: vacuum_clean
    condition: 
      condition: or
      conditions:
        - condition: state
          entity_id: sensor.vacuum
          state: 'Clean'
        - condition: state
          entity_id: sensor.vacuum
          state: 'Train'
    action:
      - service: homeassistant.update_entity
        entity_id: sensor.rest980
  
  # Log Vacuum Location to File
  - alias: Vacuum Log Position
    initial_state: true
    trigger:
        platform: state
        entity_id: sensor.vacuum_location
    condition: 
      condition: or
      conditions:
        - condition: state
          entity_id: sensor.vacuum
          state: 'Clean'
        - condition: state
          entity_id: sensor.vacuum
          state: 'Train'
    action:
      - service: notify.vacuumfile
        data_template: 
          message: "{{ states('sensor.vacuum_location') }}"
               
  # Initialize Blank Vacuum Log File
  - alias: Vacuum Clean Log
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.vacuum
        from: 'Ready'
        to: 'Clean'
      - platform: state
        entity_id: sensor.vacuum
        from: 'Ready'
        to: 'Train'
    action:
      - service: shell_command.vacuum_clear_log
      - service: shell_command.vacuum_clear_image
          
  # Update Vacuum Log File with Finished Status
  - alias: Vacuum Notify on Finished Cleaning
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.vacuum
        from: 'Clean'
        to: 'Ready'
      - platform: state
        entity_id: sensor.vacuum
        from: 'Train'
        to: 'Ready'
    action:
      - service: notify.vacuumfile
        data_template: 
          message: "Finished"

  # Update Vacuum Log File with Stuck Status
  - alias: Vacuum Notify on Stuck Status
    initial_state: true
    trigger:
      platform: template
      value_template: "{{ is_state_attr('sensor.vacuum', 'phase', 'Stuck') }}"
    action:
      - service: notify.vacuumfile
        data_template: 
          message: "Stuck"

  # Generate Complete Vacuum Map
  - alias: Vacuum Generate Image after Cleaning
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.vacuum
        from: 'Clean'
        to: 'Ready'
        for:
          seconds: 10
      - platform: state
        entity_id: sensor.vacuum
        from: 'Train'
        to: 'Ready'
        for:
          seconds: 10
    action:
      service: shell_command.vacuum_generate_image

  # Maintence Check
  - alias: Vacuum Maintenance Check
    initial_state: true
    trigger:
      - platform: time_pattern
        minutes: /15
      - platform: state
        entity_id: [
          'sensor.vacuum_maint_clean_brushes',
          'sensor.vacuum_maint_clean_contacts',
          'sensor.vacuum_maint_clean_filter',
          'sensor.vacuum_maint_clean_wheel',
          'sensor.vacuum_maint_replace_brushes',
          'sensor.vacuum_maint_replace_filter',
          'sensor.vacuum_maint_replace_wheel'
        ]
    action:
      - service_template: >-
          {% set ns = namespace(count = 0) %}
          {% for item in states.sensor if 'vacuum_maint' in item.entity_id and (state_attr(item.entity_id, 'visibility_timestamp') < as_timestamp(now())) %}
            {% set ns.count = loop.index %}
          {% endfor %}
          {% if ns.count > 0 %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        entity_id: input_boolean.vacuum_maint_due


###################################
# Notify
###################################

notify:
  - name: VacuumFile
    platform: file
    filename: /config/vacuum/vacuum.log

###################################
# Camera
###################################

camera:
  - platform: generic
    still_image_url: 'http://localhost:3001/image.php'
    content_type: image/png
    name: Roomba

    
###################################
# Shell Command
###################################

shell_command:
  vacuum_clear_log: cp /dev/null /config/vacuum/vacuum.log
  vacuum_clear_image: curl -X GET -s -O /dev/null 'http://localhost:3001/image.php?clear=true'
  vacuum_generate_image: curl -X GET -s -O /dev/null 'http://localhost:3001/image.php?last=true'


###################################
# Scripts
###################################

script:
  start_roomba:
    alias: Start Roomba
    sequence:
      - service: rest_command.vacuum_clean